{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Dev Docs!","text":"<p>I created this site to document various things I've learned over the years. Sometimes, it's hard to scour through all the documentation to find the one thing you need when you need it the most. This site is my attempt to make that easier for myself and others.</p>"},{"location":"#why-the-name","title":"Why the name?","text":"<pre><code>aaramsesounga (\u0906\u0930\u093e\u092e \u0938\u0947 \u0938\u094b\u090a\u0902\u0917\u093e) - I'll sleep peacefully\n</code></pre> <p>I know how we all developers, do mess up our sleep schedules, while trying to figure out that one thing that's been bugging us.</p> <p>It's always \"Bas yeh fix karlu, fir mai aaram se sounga (I'll fix this and then I'll sleep peacefully)\". Thus we end up staying awake till 4 AM, and then we have college at 8 AM the next day. Fixing that one thing takes hours, had I documented it, I could have just looked it up and fixed it in minutes.</p> <p></p> <p>I hope this site helps you get back to your sleep schedule faster.</p>"},{"location":"#why-the-dog","title":"Why the dog?","text":"<p>I love dogs, and I love the internet. So, I thought why not combine the two.</p>"},{"location":"#can-i-contribute","title":"Can I contribute?","text":"<p>Sure yeah! Just make a PR here and I'll review it. If it's good, I'll merge it. If it's not, I'll let you know what you can do to make it better.</p>"},{"location":"about/","title":"About","text":"I am Shourya <code>(pronounced as sure-yeaa)</code> De, a Pre-Final year student at <code>Thapar Institute of Engineering and Technology</code>. I am primarily backend developer with a penchant for building efficient and scalable systems. I have a strong background in programming languages such as <code>Python</code> and <code>JavaScript</code>, and I enjoy solving complex problems. <p>Aside from development, I have a keen interest in reading and exploring new technologies and frameworks. I have recently started diving deep in Machine Learning and Data Science, and I am currently learning Natural Language Processing techniques.</p> <p>I also do love listening to music, my current favourites being Pink Floyd and Guns N Roses.</p> <p>In my free time, I enjoy reading novels, making paintings, and reading about numismatics and its history.</p>"},{"location":"FastAPI/ml-models/","title":"ML Models in FastAPI","text":""},{"location":"FastAPI/ml-models/#working-with-ml-models-using-fastapi","title":"Working with ML Models using FastAPI","text":"<p>Often for projects, where I am using FastAPI, a simple model returns some predicted output after taking some inputs. In this case processing/returning the data becomes hard.</p> <p>Here in this example code, <code>modelrffinal.pickle</code> is a model which predicts the risk of a person catching COVID-19.</p> app.py<pre><code>import warnings\nimport pickle\nfrom pydantic import BaseModel\nimport uvicorn\nfrom fastapi import FastAPI\nwarnings.filterwarnings(\"ignore\")\napp = FastAPI()\n\nmodel = pickle.load(open('modelrffinal.pickle', 'rb'))\nclass Data(BaseModel):\n    population_density: float\n    # add other features here\n\n@app.post(\"/predict\")\ndef predict(data: Data):\n    input = [values for values in data.dict().values()]\n    results = model.predict([input])  # should be a 2D array\n    return {'Risk analysis': results[0]}\n</code></pre> <p>Working with ML Models in FastAPI is quite easy, although some important things which are needed to be checked are :</p> <ul> <li>The framework used by the model is installed as a dependency in the project. (Check Pipfile)</li> <li>Data class is instantiated for feeding only the required data to the model after converting it into 2D array from form data.</li> <li>Once form data is received from client, pass only the values in the 2D array from the key-value pair received.</li> <li>Use <code>[[]]</code> for workaround of 2D arrays, better not use reshape.</li> </ul>"},{"location":"FastAPI/nginx-fastapi-compose/","title":"NGINX and Docker Compose","text":""},{"location":"FastAPI/nginx-fastapi-compose/#nginx-and-docker-compose","title":"NGINX and Docker Compose","text":"<p>While running a FastAPI application with NGINX and Docker Compose, we need to make sure that the NGINX server is able to communicate with the FastAPI application. For this we need to have <code>root_path</code> configured in the FastAPI application, or else configure NGINX properly so that you don't need to set the <code>root_path</code> explicitly.</p> <p>This really helped me, as I didn't want to scaffold root_path in the application itself, since I was using <code>nginx</code> as a reverse proxy in production with docker-compose.</p> <p>For people using <code>nginx</code> as a reverse proxy, and stuck on how to forward the traffic to the right container, this is my current configuration:</p> sample-application.conf<pre><code>server {\n    listen 80;\n    server_name example.com;\n    location / {\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        # For my react frontend served by an nginx container\n        proxy_pass http://localhost:7000;\n    }\n    location /api/{\n       # For FastAPI app running in docker container\n       # where the endpoint should be /api/\n        proxy_pass http://localhost:8100/;\n  }\n}\n</code></pre> <p>Notice the trailing slash at the end in line <code>13</code>, it is important,so that it performs stripping properly.</p>"},{"location":"os_fixes/","title":"System Info","text":"<p>I use a Lenovo IdeaPad 3 with Garuda Linux installed on it. I have a dual boot setup with Windows 10 and Garuda Linux. I use Windows 10 for college assignments and Garuda Linux for everything else.</p> <p>My system info is as follows:</p> cat /etc/os-release<pre><code>NAME=\"Garuda Linux\"\nPRETTY_NAME=\"Garuda Linux\"\nID=garuda\nID_LIKE=arch\nBUILD_ID=rolling\nANSI_COLOR=\"38;2;23;147;209\"\nHOME_URL=\"https://garudalinux.org/\"\nDOCUMENTATION_URL=\"https://wiki.garudalinux.org/\"\nSUPPORT_URL=\"https://forum.garudalinux.org/\"\nBUG_REPORT_URL=\"https://gitlab.com/groups/garuda-linux/\"\nPRIVACY_POLICY_URL=\"https://terms.archlinux.org/docs/privacy-policy/\"\n</code></pre> uname -r<pre><code>6.1.55-1-lts\n</code></pre> inxi -Fxxxza --no-host<pre><code>System:\n  Kernel: 6.1.55-1-lts arch: x86_64 bits: 64 compiler: gcc v: 13.2.1\n    clocksource: hpet available: acpi_pm\n    parameters: BOOT_IMAGE=/@/boot/vmlinuz-linux-lts\n    root=UUID=62356c5b-fc37-4a8c-9498-2dc26dd64f68 rw rootflags=subvol=@\n    quiet rd.udev.log_priority=3 vt.global_cursor_default=0\n    systemd.unified_cgroup_hierarchy=1 loglevel=3 ibt=off\n  Desktop: KDE Plasma v: 5.27.8 tk: Qt v: 5.15.10 info: polybar wm: kwin_x11\n    vt: 2 dm: SDDM Distro: Garuda Linux base: Arch Linux\nMachine:\n  Type: Laptop System: LENOVO product: 82KT v: IdeaPad 3 14ALC6\n    serial: &lt;superuser required&gt; Chassis: type: 10 v: IdeaPad 3 14ALC6\n</code></pre>"},{"location":"os_fixes/hdmi_fix/","title":"HDMI Fix","text":"<p>There was no output of my laptop when I connected with an HDMI cable. The solution was to use a new display mode with params that were supported by the HDMI cable.</p> <pre><code> xrandr --newmode \"1920x1080_60.00\"  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync\n</code></pre> <p>By running this command, you are defining a new display mode with the specified resolution, refresh rate, and timings. After defining this mode, you can use it with the <code>xrandr</code> command to change your display to this resolution and refresh rate if your hardware supports it.</p>"},{"location":"os_fixes/hdmi_fix/#explanation","title":"Explanation","text":"<p>This command is using the <code>xrandr</code> tool, which is a command-line interface to the X Resize, Rotate, and Reflect Extension (RandR) used in X Window System. The purpose of this specific command is to create a new display mode with a resolution of 1920x1080 pixels and a refresh rate of 60 Hz.</p> <ol> <li> <p><code>--newmode \"1920x1080_60.00\"</code>: This part of the command defines a new display mode with a label \"1920x1080_60.00\". The format is <code>\"widthxheight_refreshrate\"</code>. In this case, the width is 1920 pixels, the height is 1080 pixels, and the refresh rate is 60 Hz.</p> </li> <li> <p><code>173.00</code>: This number represents the dot clock, which is the speed at which the pixels are transmitted for display. It is typically measured in MHz.</p> </li> <li> <p><code>1920 2048 2248 2576</code>: These numbers represent the horizontal timings of the display mode in pixels. Specifically, they denote the active width, the front porch, the sync width, and the back porch, respectively.</p> </li> <li> <p><code>1080 1083 1088 1120</code>: These numbers represent the vertical timings of the display mode in pixels. Similar to the horizontal timings, they denote the active height, the front porch, the sync width, and the back porch, respectively.</p> </li> <li> <p><code>-hsync +vsync</code>: These parameters specify the sync polarity. <code>-hsync</code> indicates negative horizontal sync, and <code>+vsync</code> indicates positive vertical sync. These settings are important for ensuring the proper synchronization between the graphics card and the monitor.</p> </li> </ol>"}]}